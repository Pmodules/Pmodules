#!/bin/bash

declare    PMODULES_MODULEFILES_DIR='modulefiles'
declare    PMODULES_CONFIG_DIR='config'
declare -A GroupDepths=()
declare -A Subcommands=()
declare -A Options=()
declare -A Help=()

# initialize help text of 'module --version'
Help['version']="
Pmodules @PMODULES_VERSION@ using Tcl Environment Modules @MODULES_VERSION@
Copyright GNU GPL v2
"

#
# display help text for command given in $1
#
print_help() {
        echo -e "${Help[$1]}" 1>&2
        std::die 1
}

#
# compute depth of modulefile directory.
#
# Args:
#       $1: absolute path of a modulefile directory
#
compute_group_depth () {
        local -r dir=$1
	test -d "${dir}" || return 1
        local group=${dir%/*}
        local group=${group##*/}
        [[ -n "${GroupDepths[${group}]}" ]] && return 0
	local -i depth=$(${find} "${dir}" -depth \( -type f -o -type l \) \
                          -printf "%d" -quit 2>/dev/null)
	(( depth-=2 ))
	# if a group doesn't contain a modulefile, depth is negativ
	# :FIXME: better solution?
	(( depth < 0 )) && (( depth = 0 ))
	GroupDepths[$group]=${depth}
}

#
# (Re-)Scan available groups in given overlays and compute group depth's
#
# Args:
#       $1: array of overlays
#
scan_groups () {
	local -r overlays=( "$@" )
        local    overlay
        for overlay in "${overlays[@]}"; do
	        local moduledir
	        for moduledir in ${overlay}/*/${PMODULES_MODULEFILES_DIR}; do
		        compute_group_depth "${moduledir}"
	        done
        done
}

get_overlay_info(){
	# Args:
	#	$1 [in] overlay name or directory plus optional type
	#	$2 [upvar] overlay name
	#	$2 [upvar] overlay type
	#	$3 [upvar] overlay root directory
	#	$4 [upvar] overlay prefix for software installation
	#
	local name_or_dir="${1%:*}"
	[[ -d ${name_or_dir} ]] && name_or_dir=$(cd "${name_or_dir}" && pwd -L)

	local config_files=()
	if [[ -v PMODULES_OVERLAYS_CONF ]]; then
		config_files+=("${PMODULES_OVERLAYS_CONF}")
	fi
	config_files+=("${HOME}/.Pmodules/overlays.conf")
	config_files+=("${PMODULES_ROOT}/config/overlays.conf")

	for config_file in "${config_files[@]}"; do
		[[ -r "${config_file}" ]] || continue
		local toks=()
		local -i lino=0
		while read -a toks; do
			(( lino+=1 ))
			[[ -n "${toks[0]}" ]] || continue
			[[ ${toks[0]} == \#* ]] && continue
			(( ${#toks[@]} < 2 )) && \
				std::warn "%s - %s" \
					  "Skipping malformed line ${lino} in configuration file" \
					  "${config_file}"
			local _name="${toks[0]%:*}"
			if [[ "${toks[0]%:*}" == "${name_or_dir}" ]] \
				   || [[ "${toks[1]}" == "${name_or_dir}" ]]; then
				# take type from
				# 1. $1
				# 2. configuration file
				# 3. use default type
				local _type="${ol_normal}"
				if [[ "$1" == *:* ]]; then
					_type="${1##*:}"
				elif [[ "${toks[0]}" == *:* ]]; then
					_type="${toks[0]##*:}"
				fi
				[[ -n "$2" ]] && std::upvar "$2" "${toks[0]%:*}"
				[[ -n "$3" ]] && std::upvar "$3" "${_type}"
				[[ -n "$4" ]] && std::upvar "$4" "${toks[1]}"
				if [[ -n "$5" ]]; then
					if [[ -n "${toks[2]}" ]]; then
						std::upvar "$5" "${toks[2]}"
					else
						std::upvar "$5" "${toks[1]}"
					fi
				fi
				return 0
			fi
		done < "${config_file}"
	done
	return 1
}

get_available_overlays(){
	# Args:
	#	$1 [upvar] result
	#
	local name_or_dir="${1%:*}"
	[[ -d ${name_or_dir} ]] && name_or_dir=$(cd "${name_or_dir}" && pwd -L)

	local config_files=()
	if [[ -v PMODULES_OVERLAYS_CONF ]]; then
		config_files+=("${PMODULES_OVERLAYS_CONF}")
	fi
	config_files+=("${HOME}/.Pmodules/overlays.conf")
	config_files+=("${PMODULES_ROOT}/config/overlays.conf")

	local -a result=()
	for config_file in "${config_files[@]}"; do
		[[ -r "${config_file}" ]] || continue
		local toks=()
		local -i lino=0
		while read -a toks; do
			(( lino++ ))
			[[ -n "${toks[0]}" ]] || continue
			[[ ${toks[0]} == \#* ]] && continue
			(( ${#toks[@]} < 2 )) && \
				std::warn "%s - %s" \
					  "Skipping malformed line ${lino} in configuration file" \
					  "${config_file}"
			local _name="${toks[0]%:*}"
			# take type from
			# 1. $1
			# 2. configuration file
			# 3. use default type
			local _type="${ol_normal}"
			if [[ "$1" == *:* ]]; then
				_type="${1##*:}"
			elif [[ "${toks[0]}" == *:* ]]; then
				_type="${toks[0]##*:}"
			fi
			local _ol_dir="${toks[1]}"
			local _ol_install_dir="${toks[2]}"
			_ol_install_dir="${_ol_install_dir:-${toks[1]}}"
			result+=( "${_name} ${_type} ${_ol_dir} ${_ol_install_dir}")
		done < "${config_file}"
	done
	std::upvar "$1" "${result[@]}"
}
# Local Variables:
# mode: sh
# sh-basic-offset: 8
# tab-width: 8
# End:
