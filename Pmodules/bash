#!/bin/bash

#############################################################################
# bash 3 or newer ...
#
if [ ${BASH_VERSINFO:-0} -lt 3 ]; then
	echo "BASH version ${BASH_VERSION} ist not supported! You need at least version 3..."
	return 1
fi

#############################################################################
# initialize bash completion
#
if [[ -r "${BASH_SOURCE[0]%/*}/bash_completion" ]]; then
	source "${BASH_SOURCE[0]%/*}/bash_completion"
fi

#############################################################################
# legacy...
#
unset MODULE_VERSION
unset MODULE_VERSION_STACK
unset MODULESHOME

#############################################################################
# implement module comand as shell function
#
declare -- _dname_=$(dirname "${BASH_SOURCE[0]}")
declare -- PMODULES_HOME="$(cd "${_dname_}/.." && pwd -L)"
unset _dname_

declare -- _cmd_="module() {
        unset BASH_ENV
        local output=\"\$(\"${PMODULES_HOME}/bin/modulecmd\" bash \"\$@\")\"
        eval \"\${output}\"
}"

eval "$(echo "${_cmd_}")"
export -f module

_cmd_="modbuild(){
	\"${PMODULES_HOME}/bin/modbuild\" \"\$@\"
}"
eval "$(echo "${_cmd_}")"
export -f modbuild

unset _cmd_

# Local Variables:
# mode: sh
# sh-basic-offset: 8
# tab-width: 8
# End:
